#!/usr/bin/env python3
"""
üîÑ ALTERNATIVES GRATUITES √Ä NGROK
Solutions sans avertissement pour l'exposition publique de GeoServer
"""

import subprocess
import os
import time

class TunnelAlternatives:
    """Alternatives gratuites √† ngrok sans avertissement"""
    
    def __init__(self):
        self.alternatives = {
            "cloudflared": {
                "name": "Cloudflare Tunnel",
                "cost": "Gratuit",
                "warning": "Aucun",
                "install": "winget install cloudflare.cloudflared",
                "command": "cloudflared tunnel --url localhost:8080",
                "pros": ["Gratuit illimit√©", "Pas d'avertissement", "Tr√®s stable"],
                "cons": ["N√©cessite compte Cloudflare"]
            },
            "serveo": {
                "name": "Serveo.net",
                "cost": "Gratuit",
                "warning": "Aucun",
                "install": "Aucune installation",
                "command": "ssh -R 80:localhost:8080 serveo.net",
                "pros": ["Imm√©diat", "Pas d'inscription", "Pas d'avertissement"],
                "cons": ["URL al√©atoire", "Moins stable"]
            },
            "localtunnel": {
                "name": "LocalTunnel",
                "cost": "Gratuit",
                "warning": "Minimal",
                "install": "npm install -g localtunnel",
                "command": "lt --port 8080",
                "pros": ["Simple", "Rapide", "Avertissement discret"],
                "cons": ["N√©cessite Node.js"]
            },
            "pagekite": {
                "name": "PageKite",
                "cost": "Gratuit (limit√©)",
                "warning": "Aucun",
                "install": "pip install pagekite",
                "command": "python pagekite.py 8080 yourname.pagekite.me",
                "pros": ["Professionnel", "Stable"],
                "cons": ["Inscription requise", "Limite gratuite"]
            }
        }
    
    def show_alternatives(self):
        """Affiche toutes les alternatives"""
        print("üîÑ ALTERNATIVES GRATUITES √Ä NGROK SANS AVERTISSEMENT:")
        print("=" * 60)
        
        for key, alt in self.alternatives.items():
            print(f"\nüìå {alt['name']}")
            print(f"   üí∞ Co√ªt: {alt['cost']}")
            print(f"   ‚ö†Ô∏è Avertissement: {alt['warning']}")
            print(f"   üì¶ Installation: {alt['install']}")
            print(f"   üöÄ Commande: {alt['command']}")
            print(f"   ‚úÖ Avantages: {', '.join(alt['pros'])}")
            print(f"   ‚ùå Inconv√©nients: {', '.join(alt['cons'])}")
    
    def install_cloudflared(self):
        """Installation de Cloudflare Tunnel (recommand√©)"""
        print("üåê Installation de Cloudflare Tunnel...")
        try:
            # V√©rification si d√©j√† install√©
            result = subprocess.run(["cloudflared", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Cloudflare Tunnel d√©j√† install√©")
                return True
        except:
            pass
        
        # Installation via winget
        try:
            subprocess.run(["winget", "install", "cloudflare.cloudflared"], 
                          check=True)
            print("‚úÖ Cloudflare Tunnel install√© avec succ√®s")
            return True
        except:
            print("‚ùå √âchec installation via winget")
            print("üí° T√©l√©chargez manuellement: https://github.com/cloudflare/cloudflared/releases")
            return False

if __name__ == "__main__":
    alternatives = TunnelAlternatives()
    alternatives.show_alternatives()
    
    print("\n" + "="*60)
    print("üéØ RECOMMANDATION: Cloudflare Tunnel")
    print("   ‚Ä¢ Gratuit et illimit√©")
    print("   ‚Ä¢ Aucun avertissement")
    print("   ‚Ä¢ Tr√®s professionnel")
    print("   ‚Ä¢ Stable et rapide")
