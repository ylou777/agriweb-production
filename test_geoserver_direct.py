#!/usr/bin/env python3
"""
Test direct de connexion GeoServer apr√®s d√©sactivation anti-bruteforce
"""

import requests
import os
from requests.auth import HTTPBasicAuth
import json

# Configuration GeoServer
GEOSERVER_URL = "http://81.220.178.156:8080/geoserver"
GEOSERVER_USER = "admin"
GEOSERVER_PASSWORD = "geoserver"

def test_geoserver_connection():
    """Test complet de la connexion GeoServer"""
    
    print("üîç Test de connexion GeoServer direct")
    print(f"URL: {GEOSERVER_URL}")
    print(f"Utilisateur: {GEOSERVER_USER}")
    print("-" * 50)
    
    # Test 1: Acc√®s de base
    try:
        print("1Ô∏è‚É£ Test d'acc√®s de base...")
        response = requests.get(f"{GEOSERVER_URL}/web/", 
                              auth=HTTPBasicAuth(GEOSERVER_USER, GEOSERVER_PASSWORD),
                              timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Acc√®s de base OK")
        else:
            print(f"   ‚ùå Erreur d'acc√®s: {response.status_code}")
            print(f"   R√©ponse: {response.text[:200]}...")
            
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
        return False
    
    # Test 2: API REST
    try:
        print("\n2Ô∏è‚É£ Test API REST...")
        response = requests.get(f"{GEOSERVER_URL}/rest/workspaces.json",
                              auth=HTTPBasicAuth(GEOSERVER_USER, GEOSERVER_PASSWORD),
                              timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ API REST OK")
            workspaces = response.json()
            print(f"   Workspaces trouv√©s: {len(workspaces.get('workspaces', {}).get('workspace', []))}")
        else:
            print(f"   ‚ùå Erreur API REST: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur API REST: {e}")
    
    # Test 3: WMS Capabilities
    try:
        print("\n3Ô∏è‚É£ Test WMS Capabilities...")
        response = requests.get(f"{GEOSERVER_URL}/wms",
                              params={
                                  'service': 'WMS',
                                  'version': '1.1.0',
                                  'request': 'GetCapabilities'
                              },
                              auth=HTTPBasicAuth(GEOSERVER_USER, GEOSERVER_PASSWORD),
                              timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ WMS Capabilities OK")
            if 'WMT_MS_Capabilities' in response.text or 'WMS_Capabilities' in response.text:
                print("   ‚úÖ Format XML WMS valide")
            else:
                print("   ‚ö†Ô∏è Format XML WMS non reconnu")
        else:
            print(f"   ‚ùå Erreur WMS: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur WMS: {e}")
    
    # Test 4: WFS Capabilities
    try:
        print("\n4Ô∏è‚É£ Test WFS Capabilities...")
        response = requests.get(f"{GEOSERVER_URL}/wfs",
                              params={
                                  'service': 'WFS',
                                  'version': '1.0.0',
                                  'request': 'GetCapabilities'
                              },
                              auth=HTTPBasicAuth(GEOSERVER_USER, GEOSERVER_PASSWORD),
                              timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ WFS Capabilities OK")
            if 'WFS_Capabilities' in response.text:
                print("   ‚úÖ Format XML WFS valide")
            else:
                print("   ‚ö†Ô∏è Format XML WFS non reconnu")
        else:
            print(f"   ‚ùå Erreur WFS: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur WFS: {e}")
    
    # Test 5: V√©rification des couches
    try:
        print("\n5Ô∏è‚É£ Test des couches disponibles...")
        response = requests.get(f"{GEOSERVER_URL}/rest/layers.json",
                              auth=HTTPBasicAuth(GEOSERVER_USER, GEOSERVER_PASSWORD),
                              timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            layers_data = response.json()
            layers = layers_data.get('layers', {}).get('layer', [])
            print(f"   ‚úÖ {len(layers)} couches trouv√©es")
            if layers:
                print("   Premi√®res couches:")
                for layer in layers[:3]:
                    layer_name = layer.get('name', 'Nom inconnu')
                    print(f"     - {layer_name}")
        else:
            print(f"   ‚ùå Erreur couches: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur couches: {e}")
    
    print("\n" + "="*50)
    print("üèÅ Test termin√©")
    return True

if __name__ == "__main__":
    test_geoserver_connection()
