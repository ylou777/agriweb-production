# Script d'installation des pr√©requis pour la migration GeoServer
# Installe Railway CLI et Docker Desktop si n√©cessaire

Write-Host "üîß Installation des pr√©requis pour la migration GeoServer" -ForegroundColor Green

# V√©rification de winget (gestionnaire de paquets Windows)
if (Get-Command winget -ErrorAction SilentlyContinue) {
    Write-Host "‚úÖ Winget disponible" -ForegroundColor Green
    
    # Installation Node.js et npm si n√©cessaire
    if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
        Write-Host "üì¶ Installation de Node.js..." -ForegroundColor Yellow
        winget install OpenJS.NodeJS
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")
    }
    
    # Installation Docker Desktop si n√©cessaire
    if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-Host "üê≥ Installation de Docker Desktop..." -ForegroundColor Yellow
        winget install Docker.DockerDesktop
    }
    
} else {
    Write-Host "‚ö†Ô∏è Winget non disponible. Installation manuelle requise:" -ForegroundColor Yellow
    Write-Host "1. Node.js: https://nodejs.org/en/download/" -ForegroundColor Cyan
    Write-Host "2. Docker Desktop: https://www.docker.com/products/docker-desktop" -ForegroundColor Cyan
}

# Attendre que les installations se terminent
Write-Host "‚è±Ô∏è Attente de la finalisation des installations..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

# Rechargement du PATH
$env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

# Installation Railway CLI
if (Get-Command npm -ErrorAction SilentlyContinue) {
    Write-Host "üöÇ Installation de Railway CLI..." -ForegroundColor Yellow
    npm install -g @railway/cli
} else {
    Write-Host "‚ùå npm non disponible. Installez Node.js d'abord." -ForegroundColor Red
    Write-Host "üí° Alternative: T√©l√©chargez Railway CLI depuis https://docs.railway.app/develop/cli" -ForegroundColor Cyan
}

# V√©rification finale
Write-Host "`nüìä V√©rification des installations:" -ForegroundColor Green

if (Get-Command node -ErrorAction SilentlyContinue) {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Node.js: Non install√©" -ForegroundColor Red
}

if (Get-Command npm -ErrorAction SilentlyContinue) {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå npm: Non install√©" -ForegroundColor Red
}

if (Get-Command docker -ErrorAction SilentlyContinue) {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Docker: Non install√©" -ForegroundColor Red
}

if (Get-Command railway -ErrorAction SilentlyContinue) {
    $railwayVersion = railway --version
    Write-Host "‚úÖ Railway CLI: $railwayVersion" -ForegroundColor Green
} else {
    Write-Host "‚ùå Railway CLI: Non install√©" -ForegroundColor Red
}

Write-Host "`nüí° Instructions:" -ForegroundColor Yellow
Write-Host "1. Si des installations ont √©chou√©, red√©marrez PowerShell en tant qu'administrateur" -ForegroundColor Cyan
Write-Host "2. Une fois tout install√©, relancez: .\deploy_geoserver.ps1" -ForegroundColor Cyan
Write-Host "3. Vous pouvez aussi utiliser l'alternative sans Docker (voir GUIDE_MIGRATION_GEOSERVER.md)" -ForegroundColor Cyan
