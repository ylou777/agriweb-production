#!/usr/bin/env pwsh
# Script de surveillance continue du d√©ploiement Railway

param(
    [int]$MaxAttempts = 30,
    [int]$IntervalSeconds = 30
)

$geoserverUrl = "https://geoserver-agriweb-production.up.railway.app/geoserver"

Write-Host "üîÑ SURVEILLANCE D√âPLOIEMENT RAILWAY" -ForegroundColor Green
Write-Host "URL cible: $geoserverUrl" -ForegroundColor Cyan
Write-Host "Tentatives: $MaxAttempts (toutes les $IntervalSeconds secondes)" -ForegroundColor Cyan
Write-Host "=" * 50

for ($i = 1; $i -le $MaxAttempts; $i++) {
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "`n[$timestamp] Tentative $i/$MaxAttempts" -ForegroundColor Yellow
    
    # V√©rifier le statut Railway
    try {
        $status = railway status 2>$null
        Write-Host "   üìä Status: $status" -ForegroundColor White
    } catch {
        Write-Host "   ‚ö†Ô∏è  Erreur status Railway" -ForegroundColor Yellow
    }
    
    # Test connectivit√©
    try {
        $response = Invoke-WebRequest -Uri $geoserverUrl -Method GET -TimeoutSec 15 -ErrorAction Stop
        
        if ($response.StatusCode -eq 200) {
            Write-Host "   ‚úÖ GEOSERVER ACCESSIBLE ! (Status: $($response.StatusCode))" -ForegroundColor Green
            Write-Host "   üåê URL: $geoserverUrl" -ForegroundColor Blue
            Write-Host "   üîê Admin: admin / admin123" -ForegroundColor Blue
            
            # Test de l'interface admin
            try {
                $adminUrl = "$geoserverUrl/web"
                $adminResponse = Invoke-WebRequest -Uri $adminUrl -Method HEAD -TimeoutSec 10 -ErrorAction Stop
                Write-Host "   ‚úÖ Interface admin accessible" -ForegroundColor Green
            } catch {
                Write-Host "   ‚ö†Ô∏è  Interface admin en cours de chargement..." -ForegroundColor Yellow
            }
            
            Write-Host "`nüéâ D√âPLOIEMENT R√âUSSI !" -ForegroundColor Green
            Write-Host "üí° Vous pouvez maintenant:" -ForegroundColor Cyan
            Write-Host "   1. Acc√©der √† GeoServer: $geoserverUrl" -ForegroundColor White
            Write-Host "   2. Migrer vos donn√©es: python migrate_geoserver_data.py" -ForegroundColor White
            Write-Host "   3. Passer en production: .\test_geoserver_final.ps1 -Production" -ForegroundColor White
            
            break
        } catch {
            $errorMsg = $_.Exception.Message
            
            # Analyser le type d'erreur
            if ($errorMsg -like "*404*" -or $errorMsg -like "*Not Found*") {
                Write-Host "   ‚è≥ Service en cours de d√©marrage (404)" -ForegroundColor Yellow
            } elseif ($errorMsg -like "*train has not arrived*") {
                Write-Host "   üöÇ Railway: Le train n'est pas arriv√© √† la station" -ForegroundColor Yellow
            } elseif ($errorMsg -like "*timeout*" -or $errorMsg -like "*timed out*") {
                Write-Host "   ‚è∞ Timeout - Service encore en d√©marrage" -ForegroundColor Yellow
            } elseif ($errorMsg -like "*connection*") {
                Write-Host "   üîå Probl√®me de connexion - D√©ploiement en cours" -ForegroundColor Yellow
            } else {
                Write-Host "   ‚ùå Erreur: $errorMsg" -ForegroundColor Red
            }
        }
    
        # V√©rifier les logs si disponibles
        try {
            $logs = railway logs 2>$null
            if ($logs -and $logs -notlike "*No deployments found*") {
                Write-Host "   üìã Logs disponibles" -ForegroundColor Green
            } else {
                Write-Host "   üìã Pas de logs encore" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "   üìã Logs non accessibles" -ForegroundColor Yellow
        }
    
        if ($i -lt $MaxAttempts) {
            Write-Host "   ‚è∏Ô∏è  Attente $IntervalSeconds secondes..." -ForegroundColor Gray
            Start-Sleep -Seconds $IntervalSeconds
        }
    }

    if ($i -gt $MaxAttempts) {
        Write-Host "`n‚ö†Ô∏è  TIMEOUT ATTEINT" -ForegroundColor Red
        Write-Host "Le d√©ploiement prend plus de temps que pr√©vu." -ForegroundColor Yellow
        Write-Host "`nüîß Actions recommand√©es:" -ForegroundColor Cyan
        Write-Host "1. V√©rifier le dashboard: railway open" -ForegroundColor White
        Write-Host "2. Red√©ployer si n√©cessaire: railway redeploy" -ForegroundColor White
        Write-Host "3. V√©rifier les logs: railway logs" -ForegroundColor White
    }
    Write-Host "4. Relancer cette surveillance: .\watch_deployment.ps1" -ForegroundColor White
}

Write-Host "`nüìä Dashboard Railway: https://railway.com/project/d9f8d8f2-122a-42a9-bc98-a3d87067b475" -ForegroundColor Blue
