#!/usr/bin/env python3
"""
Analyse des param√®tres d'authentification GeoServer critiques
Impact sur l'acc√®s distant Railway
"""

def analyze_auth_settings():
    """Analyse des param√®tres d'authentification GeoServer"""
    
    print("üîí ANALYSE PARAM√àTRES D'AUTHENTIFICATION GEOSERVER")
    print("="*55)
    
    settings = {
        "Port SSL": {
            "valeur": "443",
            "impact": "CRITIQUE",
            "description": "Port HTTPS pour acc√®s s√©curis√©",
            "recommandation": "‚úÖ 443 est correct pour HTTPS",
            "railway_impact": "Railway peut acc√©der via HTTPS si configur√©"
        },
        "URL de redirection d√©connexion": {
            "valeur": "/web/",
            "impact": "MINEUR",
            "description": "Redirection apr√®s logout",
            "recommandation": "‚úÖ /web/ est standard",
            "railway_impact": "N'affecte pas l'acc√®s API Railway"
        },
        "Protection force brute": {
            "valeur": "Activ√©e",
            "impact": "MAJEUR",
            "description": "Bloque les tentatives r√©p√©t√©es",
            "recommandation": "‚ö†Ô∏è Peut bloquer Railway si erreurs r√©p√©t√©es",
            "railway_impact": "ATTENTION: Railway pourrait √™tre bloqu√©"
        },
        "D√©lai minimum √©chec": {
            "valeur": "1 seconde",
            "impact": "MOD√âR√â",
            "description": "D√©lai apr√®s √©chec d'auth",
            "recommandation": "‚úÖ 1s est raisonnable",
            "railway_impact": "Ralentit l√©g√®rement Railway si erreur"
        },
        "D√©lai maximum √©chec": {
            "valeur": "5 secondes",
            "impact": "MOD√âR√â", 
            "description": "D√©lai max apr√®s √©checs r√©p√©t√©s",
            "recommandation": "‚úÖ 5s acceptable",
            "railway_impact": "Peut ralentir Railway si probl√®mes"
        },
        "Masques exclus": {
            "valeur": "127.0.0.1",
            "impact": "CRITIQUE",
            "description": "IPs exempt√©es de la protection",
            "recommandation": "‚ùå PROBL√àME: seul localhost est exempt√©",
            "railway_impact": "Railway N'EST PAS exempt√© des protections"
        },
        "Max threads bloqu√©s": {
            "valeur": "100",
            "impact": "MINEUR",
            "description": "Threads max en attente",
            "recommandation": "‚úÖ 100 est suffisant",
            "railway_impact": "Peu d'impact direct"
        }
    }
    
    print("\nüìã D√âTAIL DES PARAM√àTRES:")
    for param, info in settings.items():
        print(f"\nüîß {param}")
        print(f"   Valeur actuelle: {info['valeur']}")
        print(f"   Impact: {info['impact']}")
        print(f"   Description: {info['description']}")
        print(f"   Recommandation: {info['recommandation']}")
        print(f"   Impact Railway: {info['railway_impact']}")

def identify_critical_issues():
    """Identifie les probl√®mes critiques pour Railway"""
    
    print(f"\n‚ùó PROBL√àMES CRITIQUES IDENTIFI√âS")
    print("="*40)
    
    print(f"\nüö® PROBL√àME #1: Masques r√©seau exclus")
    print(f"   Actuel: 127.0.0.1 (localhost uniquement)")
    print(f"   Probl√®me: Railway n'est PAS exempt√© de la protection anti-bruteforce")
    print(f"   Risque: Railway peut √™tre bloqu√© apr√®s quelques erreurs d'auth")
    
    print(f"\nüö® PROBL√àME #2: Protection force brute trop stricte")
    print(f"   Actuel: Activ√©e pour toutes les IPs externes")
    print(f"   Probl√®me: Railway sera soumis aux d√©lais et blocages")
    print(f"   Risque: Timeouts et blocages temporaires")

def recommend_fixes():
    """Recommandations pour corriger les probl√®mes"""
    
    print(f"\nüõ†Ô∏è CORRECTIONS RECOMMAND√âES")
    print("="*35)
    
    print(f"\n1Ô∏è‚É£ AJOUTER L'IP RAILWAY AUX MASQUES EXCLUS")
    print(f"   √âtape 1: Obtenir l'IP sortante Railway")
    print(f"   railway variables")
    print(f"   # Chercher RAILWAY_STATIC_URL ou utiliser Static IP addon")
    
    print(f"\n   √âtape 2: Dans GeoServer Admin ‚Üí Security ‚Üí Authentication")
    print(f"   Masques de r√©seau exclus: 127.0.0.1,IP_RAILWAY")
    print(f"   Exemple: 127.0.0.1,52.1.2.3")
    
    print(f"\n2Ô∏è‚É£ ALTERNATIVE: D√âSACTIVER TEMPORAIREMENT LA PROTECTION")
    print(f"   Param√®tres de pr√©vention des attaques en force brute: D√©sactiver")
    print(f"   ‚ö†Ô∏è Moins s√©curis√© mais √©vite les blocages Railway")
    
    print(f"\n3Ô∏è‚É£ ALTERNATIVE: AUGMENTER LES SEUILS")
    print(f"   D√©lai minimum: 1 ‚Üí 0.5 secondes")
    print(f"   D√©lai maximum: 5 ‚Üí 3 secondes")
    print(f"   Nombre max threads: 100 ‚Üí 200")

def test_railway_ip_detection():
    """Aide √† d√©tecter l'IP Railway"""
    
    print(f"\nüîç D√âTECTION IP RAILWAY")
    print("="*25)
    
    print(f"\nüí° M√©thodes pour obtenir l'IP Railway:")
    
    print(f"\nüìç M√©thode 1: Variables Railway")
    print(f"   railway variables | grep -i ip")
    print(f"   railway variables | findstr /i ip  # Windows")
    
    print(f"\nüìç M√©thode 2: API de test depuis Railway")
    print(f"   D√©ployez ce code sur Railway:")
    
    test_code = '''
import requests
@app.route("/my-ip")
def get_my_ip():
    response = requests.get("https://ipinfo.io/json")
    return response.json()
'''
    print(f"   {test_code}")
    
    print(f"\nüìç M√©thode 3: Logs GeoServer")
    print(f"   Regarder les logs GeoServer pour voir l'IP source des requ√™tes Railway")
    print(f"   Tail -f geoserver.log | grep authentication")
    
    print(f"\nüìç M√©thode 4: Static IP Railway (payant)")
    print(f"   railway add")
    print(f"   # Choisir 'Static Outbound IP'")
    print(f"   # Co√ªt: ~5$/mois mais IP fixe garantie")

def create_test_endpoint():
    """Cr√©e un endpoint de test pour v√©rifier l'IP"""
    
    print(f"\nüß™ ENDPOINT DE TEST POUR VOTRE APP")
    print("="*35)
    
    endpoint_code = '''
# Ajoutez ceci √† votre app Flask
@app.route("/debug/my-ip")
def debug_my_ip():
    """Endpoint pour voir l'IP publique de Railway"""
    try:
        import requests
        response = requests.get("https://ipinfo.io/json", timeout=10)
        ip_info = response.json()
        
        return {
            "railway_ip": ip_info.get("ip"),
            "city": ip_info.get("city"),
            "region": ip_info.get("region"),
            "country": ip_info.get("country"),
            "org": ip_info.get("org"),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {"error": str(e)}
'''
    
    print(f"Code √† ajouter:")
    print(endpoint_code)
    
    print(f"\nUtilisation:")
    print(f"1. Ajoutez ce code √† votre app")
    print(f"2. D√©ployez sur Railway") 
    print(f"3. Visitez: https://votre-app.railway.app/debug/my-ip")
    print(f"4. Notez l'IP affich√©e")
    print(f"5. Ajoutez cette IP aux masques exclus GeoServer")

def main():
    """Analyse principale"""
    
    analyze_auth_settings()
    identify_critical_issues()
    recommend_fixes()
    test_railway_ip_detection()
    create_test_endpoint()
    
    print(f"\nüéØ R√âSUM√â ACTIONS PRIORITAIRES")
    print("="*35)
    print(f"1. üîç Identifier l'IP sortante Railway")
    print(f"2. üîß Ajouter cette IP aux masques exclus GeoServer")
    print(f"3. üß™ Tester l'acc√®s depuis Railway")
    print(f"4. üìä Monitorer les logs d'authentification")
    
    print(f"\n‚ö†Ô∏è ATTENTION:")
    print(f"Sans ces corrections, Railway risque d'√™tre bloqu√©")
    print(f"apr√®s quelques erreurs d'authentification !")

if __name__ == "__main__":
    main()
