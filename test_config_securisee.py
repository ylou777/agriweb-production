#!/usr/bin/env python3
"""
Test de la configuration s√©curis√©e recommand√©e par ChatGPT
V√©rifie les variables d'environnement et la connectivit√© GeoServer
"""
import os
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_environment_config():
    """Test des variables d'environnement requises"""
    
    print("üîß TEST DE CONFIGURATION S√âCURIS√âE")
    print("="*50)
    
    # Variables requises selon ChatGPT
    required_vars = ["GEOSERVER_URL", "GEOSERVER_USERNAME", "GEOSERVER_PASSWORD"]
    missing_vars = []
    
    print("\nüìã Variables d'environnement requises:")
    for var in required_vars:
        value = os.getenv(var)
        if value:
            if var == "GEOSERVER_PASSWORD":
                print(f"‚úÖ {var}: ***")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: NON D√âFINIE")
            missing_vars.append(var)
    
    # Variables optionnelles
    optional_vars = ["ENVIRONMENT", "RAILWAY_ENVIRONMENT"]
    print(f"\nüìã Variables optionnelles:")
    for var in optional_vars:
        value = os.getenv(var, "non d√©finie")
        print(f"‚ÑπÔ∏è  {var}: {value}")
    
    if missing_vars:
        print(f"\n‚ùå CONFIGURATION INCOMPL√àTE")
        print(f"Variables manquantes: {', '.join(missing_vars)}")
        print(f"\nüí° Pour corriger, d√©finissez ces variables:")
        print(f"Railway: railway variables set VARIABLE=valeur")
        print(f"Local: $env:VARIABLE=\"valeur\" (PowerShell)")
        return False
    else:
        print(f"\n‚úÖ CONFIGURATION COMPL√àTE")
        return True

def test_geoserver_secure_connection():
    """Test de la connexion s√©curis√©e selon les recommandations ChatGPT"""
    
    try:
        # Import du module s√©curis√©
        from geoserver_proxy import assert_geoserver_ok, GEOSERVER_URL, GEOSERVER_USER, GEOSERVER_PASS
        
        print(f"\nüîó TEST DE CONNECTIVIT√â S√âCURIS√âE")
        print(f"="*40)
        print(f"URL test√©e: {GEOSERVER_URL}")
        print(f"Utilisateur: {GEOSERVER_USER}")
        
        # Test selon la m√©thode ChatGPT
        success = assert_geoserver_ok(GEOSERVER_URL, GEOSERVER_USER, GEOSERVER_PASS)
        
        if success:
            print(f"‚úÖ CONNEXION S√âCURIS√âE R√âUSSIE!")
            print(f"üéØ GeoServer accessible avec authentification")
            print(f"üéØ Capabilities WMS valides")
            return True
        else:
            print(f"‚ùå CONNEXION √âCHOU√âE")
            print(f"‚ö†Ô∏è V√©rifiez vos identifiants et l'accessibilit√© du serveur")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erreur d'import du module proxy: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def show_recommendations():
    """Affiche les recommandations pour la configuration Production"""
    
    print(f"\nüí° RECOMMANDATIONS CHATGPT POUR LA PRODUCTION")
    print(f"="*60)
    
    print(f"\n1Ô∏è‚É£ Variables Railway √† d√©finir:")
    print(f"   railway variables set GEOSERVER_URL=http://81.220.178.156:8080/geoserver")
    print(f"   railway variables set GEOSERVER_USERNAME=app_user")
    print(f"   railway variables set GEOSERVER_PASSWORD=votre_mot_de_passe")
    
    print(f"\n2Ô∏è‚É£ Configuration GeoServer (Admin Panel):")
    print(f"   - Global ‚Üí Settings ‚Üí Proxy Base URL:")
    print(f"     http://81.220.178.156:8080/geoserver")
    print(f"   - Service Security ‚Üí WMS/WFS: autoriser ROLE_READER")
    print(f"   - Cr√©er utilisateur 'app_user' avec ROLE_READER")
    
    print(f"\n3Ô∏è‚É£ Firewall/R√©seau:")
    print(f"   - Port 8080 ouvert en entr√©e sur votre serveur")
    print(f"   - IP sortante Railway autoris√©e (Static Egress IP recommand√©)")
    
    print(f"\n4Ô∏è‚É£ Monitoring:")
    print(f"   - Test de connectivit√© automatique au d√©marrage")
    print(f"   - Logs d√©taill√©s des erreurs de connexion")
    print(f"   - Timeout et retry configur√©s")

def main():
    """Test principal"""
    
    print(f"üöÄ VALIDATION CONFIGURATION S√âCURIS√âE CHATGPT")
    print(f"{"="*55}")
    
    # Test 1: Variables d'environnement
    config_ok = test_environment_config()
    
    if config_ok:
        # Test 2: Connectivit√© s√©curis√©e
        connection_ok = test_geoserver_secure_connection()
        
        print(f"\nüìä R√âSUM√â DES TESTS")
        print(f"="*25)
        print(f"Configuration: {'‚úÖ OK' if config_ok else '‚ùå KO'}")
        print(f"Connectivit√©:  {'‚úÖ OK' if connection_ok else '‚ùå KO'}")
        
        if config_ok and connection_ok:
            print(f"\nüéâ CONFIGURATION S√âCURIS√âE OP√âRATIONNELLE!")
            print(f"Votre application peut √™tre d√©ploy√©e en production.")
        else:
            print(f"\n‚ö†Ô∏è CONFIGURATION √Ä CORRIGER")
            show_recommendations()
    else:
        show_recommendations()

if __name__ == "__main__":
    main()
