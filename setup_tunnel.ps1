# üåê SCRIPT TUNNEL GEOSERVER LOCAL POUR AGRIWEB
# Facilite l'exposition de votre GeoServer local

param(
    [switch]$Install,
    [switch]$Start,
    [switch]$Test,
    [switch]$Stop,
    [string]$TunnelUrl
)

function Show-Banner {
    Write-Host "üåê TUNNEL GEOSERVER LOCAL" -ForegroundColor Cyan
    Write-Host "=========================" -ForegroundColor Cyan
    Write-Host ""
}

function Test-GeoServerLocal {
    Write-Host "üîç Test GeoServer local..." -ForegroundColor Yellow
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8080/geoserver/web/" -TimeoutSec 5 -ErrorAction Stop
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ GeoServer local accessible" -ForegroundColor Green
            return $true
        }
    }
    catch {
        Write-Host "‚ùå GeoServer local non accessible: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "üí° Assurez-vous que GeoServer est d√©marr√© sur le port 8080" -ForegroundColor Yellow
        return $false
    }
}

function Install-Ngrok {
    Write-Host "üì¶ Installation ngrok..." -ForegroundColor Yellow
    
    Write-Host "üìù Instructions d'installation ngrok:" -ForegroundColor Cyan
    Write-Host "1. Allez sur https://ngrok.com/download" -ForegroundColor White
    Write-Host "2. T√©l√©chargez ngrok pour Windows" -ForegroundColor White
    Write-Host "3. D√©compressez dans C:\ngrok\" -ForegroundColor White
    Write-Host "4. Cr√©ez un compte sur https://ngrok.com/signup" -ForegroundColor White
    Write-Host "5. R√©cup√©rez votre authtoken" -ForegroundColor White
    Write-Host ""
    Write-Host "‚ö° Commandes d'installation:" -ForegroundColor Cyan
    Write-Host "cd C:\ngrok\" -ForegroundColor White
    Write-Host ".\ngrok.exe authtoken VOTRE_TOKEN" -ForegroundColor White
    Write-Host ""
    
    # V√©rifier si ngrok est d√©j√† install√©
    $ngrokPaths = @(
        "C:\ngrok\ngrok.exe",
        "ngrok.exe",
        "$env:USERPROFILE\AppData\Local\ngrok\ngrok.exe"
    )
    
    foreach ($path in $ngrokPaths) {
        if (Test-Path $path) {
            Write-Host "‚úÖ ngrok trouv√©: $path" -ForegroundColor Green
            return $path
        }
    }
    
    Write-Host "‚ö†Ô∏è ngrok non trouv√©. Installez-le manuellement." -ForegroundColor Yellow
    return $null
}

function Start-Tunnel {
    Write-Host "üöÄ D√©marrage tunnel ngrok..." -ForegroundColor Yellow
    
    # V√©rifier GeoServer local d'abord
    if (-not (Test-GeoServerLocal)) {
        Write-Host "‚ùå Impossible de d√©marrer le tunnel: GeoServer local non accessible" -ForegroundColor Red
        return
    }
    
    # Trouver ngrok
    $ngrokPath = Install-Ngrok
    if (-not $ngrokPath) {
        Write-Host "‚ùå ngrok non trouv√©" -ForegroundColor Red
        return
    }
    
    Write-Host "üåê D√©marrage du tunnel sur le port 8080..." -ForegroundColor Cyan
    Write-Host "üìù Commande: $ngrokPath http 8080" -ForegroundColor White
    Write-Host ""
    Write-Host "‚ö° D√©marrez manuellement dans un autre terminal:" -ForegroundColor Yellow
    Write-Host "$ngrokPath http 8080" -ForegroundColor White
    Write-Host ""
    Write-Host "üìã Une fois d√©marr√©, copiez l'URL HTTPS et utilisez:" -ForegroundColor Cyan
    Write-Host ".\setup_tunnel.ps1 -TunnelUrl 'https://abc123.ngrok.io'" -ForegroundColor White
}

function Get-NgrokTunnel {
    Write-Host "üîç Recherche tunnel ngrok actif..." -ForegroundColor Yellow
    
    try {
        $response = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -TimeoutSec 3
        foreach ($tunnel in $response.tunnels) {
            if ($tunnel.proto -eq "https") {
                Write-Host "‚úÖ Tunnel trouv√©: $($tunnel.public_url)" -ForegroundColor Green
                return $tunnel.public_url
            }
        }
        Write-Host "‚ö†Ô∏è Aucun tunnel HTTPS trouv√©" -ForegroundColor Yellow
        return $null
    }
    catch {
        Write-Host "‚ö†Ô∏è API ngrok non accessible (tunnel non d√©marr√©?)" -ForegroundColor Yellow
        return $null
    }
}

function Test-TunnelAccess {
    param([string]$TunnelUrl)
    
    Write-Host "üß™ Test acc√®s GeoServer via tunnel..." -ForegroundColor Yellow
    
    $geoserverUrl = "$TunnelUrl/geoserver"
    try {
        $response = Invoke-WebRequest -Uri "$geoserverUrl/web/" -TimeoutSec 10 -ErrorAction Stop
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ GeoServer accessible via tunnel!" -ForegroundColor Green
            Write-Host "üåê URL GeoServer: $geoserverUrl" -ForegroundColor Cyan
            return $geoserverUrl
        }
    }
    catch {
        Write-Host "‚ùå GeoServer non accessible via tunnel: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

function Update-AgriWebConfig {
    param([string]$GeoServerUrl)
    
    Write-Host "üìù Mise √† jour configuration AgriWeb..." -ForegroundColor Yellow
    
    $configContent = @"
# üåê CONFIGURATION TUNNEL GEOSERVER LOCAL
# G√©n√©r√© le $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

# Variable d'environnement pour AgriWeb
`$env:GEOSERVER_TUNNEL_URL = "$GeoServerUrl"

# Pour Railway/Render/Heroku, ajoutez cette variable d'environnement:
# GEOSERVER_TUNNEL_URL=$GeoServerUrl

# Test de la configuration:
# curl "$GeoServerUrl/web/"

Write-Host "‚úÖ Configuration tunnel activ√©e" -ForegroundColor Green
Write-Host "üåê GeoServer URL: $GeoServerUrl" -ForegroundColor Cyan
"@

    $configContent | Out-File -FilePath "tunnel_config.ps1" -Encoding UTF8
    Write-Host "‚úÖ Configuration sauv√©e: tunnel_config.ps1" -ForegroundColor Green
    
    # Activer imm√©diatement
    $env:GEOSERVER_TUNNEL_URL = $GeoServerUrl
    Write-Host "‚ö° Variable d'environnement activ√©e pour cette session" -ForegroundColor Green
    
    Write-Host ""
    Write-Host "üìã Prochaines √©tapes:" -ForegroundColor Cyan
    Write-Host "1. Ajoutez GEOSERVER_TUNNEL_URL=$GeoServerUrl dans votre plateforme d'h√©bergement" -ForegroundColor White
    Write-Host "2. Red√©ployez AgriWeb" -ForegroundColor White
    Write-Host "3. AgriWeb utilisera automatiquement votre GeoServer local!" -ForegroundColor White
}

function Stop-Tunnel {
    Write-Host "üõë Arr√™t tunnel ngrok..." -ForegroundColor Yellow
    
    try {
        $tunnels = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -TimeoutSec 3
        foreach ($tunnel in $tunnels.tunnels) {
            $name = $tunnel.name
            Write-Host "üõë Arr√™t tunnel: $name" -ForegroundColor Yellow
            Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels/$name" -Method Delete -TimeoutSec 3
        }
        Write-Host "‚úÖ Tunnels arr√™t√©s" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ö†Ô∏è Erreur lors de l'arr√™t des tunnels" -ForegroundColor Yellow
    }
    
    # D√©sactiver la variable d'environnement
    Remove-Item Env:\GEOSERVER_TUNNEL_URL -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Variable d'environnement d√©sactiv√©e" -ForegroundColor Green
}

# MAIN SCRIPT
Show-Banner

if ($Install) {
    Install-Ngrok
}
elseif ($Start) {
    Start-Tunnel
}
elseif ($Test) {
    if ($TunnelUrl) {
        $geoserverUrl = Test-TunnelAccess -TunnelUrl $TunnelUrl
        if ($geoserverUrl) {
            Update-AgriWebConfig -GeoServerUrl $geoserverUrl
        }
    }
    else {
        # Auto-d√©tection
        $tunnelUrl = Get-NgrokTunnel
        if ($tunnelUrl) {
            $geoserverUrl = Test-TunnelAccess -TunnelUrl $tunnelUrl
            if ($geoserverUrl) {
                Update-AgriWebConfig -GeoServerUrl $geoserverUrl
            }
        }
        else {
            Write-Host "‚ùå Aucun tunnel d√©tect√©. D√©marrez d'abord ngrok:" -ForegroundColor Red
            Write-Host ".\setup_tunnel.ps1 -Start" -ForegroundColor White
        }
    }
}
elseif ($Stop) {
    Stop-Tunnel
}
else {
    Write-Host "üéØ UTILISATION:" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üì¶ Installation ngrok:" -ForegroundColor Yellow
    Write-Host ".\setup_tunnel.ps1 -Install" -ForegroundColor White
    Write-Host ""
    Write-Host "üöÄ D√©marrer tunnel:" -ForegroundColor Yellow
    Write-Host ".\setup_tunnel.ps1 -Start" -ForegroundColor White
    Write-Host ""
    Write-Host "üß™ Tester tunnel (auto-d√©tection):" -ForegroundColor Yellow
    Write-Host ".\setup_tunnel.ps1 -Test" -ForegroundColor White
    Write-Host ""
    Write-Host "üß™ Tester tunnel (URL sp√©cifique):" -ForegroundColor Yellow
    Write-Host ".\setup_tunnel.ps1 -Test -TunnelUrl 'https://abc123.ngrok.io'" -ForegroundColor White
    Write-Host ""
    Write-Host "üõë Arr√™ter tunnel:" -ForegroundColor Yellow
    Write-Host ".\setup_tunnel.ps1 -Stop" -ForegroundColor White
}
