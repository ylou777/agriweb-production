#!/usr/bin/env pwsh

param(
    [int]$MaxAttempts = 20,
    [int]$IntervalSeconds = 15
)

$geoserverUrl = "https://geoserver-agriweb-production.up.railway.app"

Write-Host "üîç Surveillance du d√©marrage GeoServer Railway" -ForegroundColor Cyan
Write-Host "URL: $geoserverUrl" -ForegroundColor White
Write-Host "Tentatives max: $MaxAttempts, Intervalle: $IntervalSeconds secondes" -ForegroundColor Gray
Write-Host "=" * 60 -ForegroundColor Gray

for ($i = 1; $i -le $MaxAttempts; $i++) {
    Write-Host "`n[$i/$MaxAttempts] Test √† $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Yellow
    
    try {
        # Test du endpoint principal
        $response = Invoke-WebRequest -Uri "$geoserverUrl/geoserver" -TimeoutSec 20 -ErrorAction Stop
        
        Write-Host "‚úÖ R√©ponse re√ßue: $($response.StatusCode)" -ForegroundColor Green
        
        if ($response.StatusCode -eq 200) {
            Write-Host "üéâ GeoServer est op√©rationnel!" -ForegroundColor Green
            
            # Test de l'interface web
            try {
                $webResponse = Invoke-WebRequest -Uri "$geoserverUrl/geoserver/web" -TimeoutSec 10
                Write-Host "‚úÖ Interface web accessible: $($webResponse.StatusCode)" -ForegroundColor Green
            } catch {
                Write-Host "‚ö†Ô∏è  Interface web pas encore pr√™te" -ForegroundColor Yellow
            }
            
            # Test de l'API REST
            try {
                $restResponse = Invoke-WebRequest -Uri "$geoserverUrl/geoserver/rest" -TimeoutSec 10
                Write-Host "‚úÖ API REST accessible: $($restResponse.StatusCode)" -ForegroundColor Green
            } catch {
                Write-Host "‚ÑπÔ∏è  API REST: $($_.Exception.Message)" -ForegroundColor Blue
            }
            
            Write-Host "`nüöÄ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!" -ForegroundColor Green
            Write-Host "üîó Acc√©der √† GeoServer: $geoserverUrl/geoserver" -ForegroundColor Cyan
            Write-Host "üîë Connexion: admin / admin123" -ForegroundColor Cyan
            break
        }
        
    } catch {
        $errorMsg = $_.Exception.Message
        
        if ($errorMsg -like "*502*" -or $errorMsg -like "*Bad Gateway*") {
            Write-Host "   ‚è≥ Serveur en cours de d√©marrage (502 Bad Gateway)" -ForegroundColor Yellow
        } elseif ($errorMsg -like "*504*" -or $errorMsg -like "*Gateway Timeout*") {
            Write-Host "   ‚è≥ Timeout du gateway (504)" -ForegroundColor Yellow
        } elseif ($errorMsg -like "*404*" -or $errorMsg -like "*Not Found*") {
            Write-Host "   ‚è≥ Service pas encore accessible (404)" -ForegroundColor Yellow
        } elseif ($errorMsg -like "*timeout*" -or $errorMsg -like "*timed out*") {
            Write-Host "   ‚è∞ Timeout - D√©marrage en cours" -ForegroundColor Yellow
        } elseif ($errorMsg -like "*connection*") {
            Write-Host "   üîå Connexion en cours d'√©tablissement" -ForegroundColor Yellow
        } else {
            Write-Host "   ‚ùå $errorMsg" -ForegroundColor Red
        }
    }
    
    if ($i -lt $MaxAttempts) {
        Write-Host "   ‚è∏Ô∏è  Attente $IntervalSeconds secondes..." -ForegroundColor Gray
        Start-Sleep -Seconds $IntervalSeconds
    }
}

if ($i -gt $MaxAttempts) {
    Write-Host "`n‚ö†Ô∏è  TIMEOUT ATTEINT" -ForegroundColor Red
    Write-Host "Le d√©marrage prend plus de temps que pr√©vu." -ForegroundColor Yellow
    Write-Host "`nüîß Actions recommand√©es:" -ForegroundColor Cyan
    Write-Host "1. V√©rifier le dashboard Railway: railway open" -ForegroundColor White
    Write-Host "2. Consulter les logs: railway logs" -ForegroundColor White
    Write-Host "3. Le d√©marrage peut prendre jusqu'√† 5-10 minutes" -ForegroundColor White
}

Write-Host "`n‚ú® Surveillance termin√©e" -ForegroundColor Cyan
