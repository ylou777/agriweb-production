#!/usr/bin/env python3
"""
Test de configuration s√©curis√©e pour GeoServer distant
Configuration optimale selon les recommandations ChatGPT
"""
import os
import requests
from requests.auth import HTTPBasicAuth
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_configuration_distante():
    """Test de la configuration pour GeoServer distant"""
    
    print("üåê TEST CONFIGURATION GEOSERVER DISTANT")
    print("="*45)
    
    # Configurations √† tester selon vos options
    configs_test = {
        "IP Publique (actuelle)": {
            "url": "http://81.220.178.156:8080/geoserver",
            "username": "railway_user",
            "password": "votre_mot_de_passe",
            "description": "Votre serveur actuel"
        },
        "IP + Port 443 (HTTPS)": {
            "url": "https://81.220.178.156:443/geoserver", 
            "username": "railway_user",
            "password": "votre_mot_de_passe",
            "description": "M√™me serveur en HTTPS"
        },
        "Avec domaine (recommand√©)": {
            "url": "https://geoserver.votredomaine.com/geoserver",
            "username": "railway_user", 
            "password": "votre_mot_de_passe",
            "description": "Configuration professionnelle"
        }
    }
    
    print("\nüìã CONFIGURATIONS √Ä TESTER:")
    for name, config in configs_test.items():
        print(f"\nüîß {name}:")
        print(f"   URL: {config['url']}")
        print(f"   User: {config['username']}")
        print(f"   Description: {config['description']}")

def test_variables_environnement():
    """Test des variables d'environnement recommand√©es"""
    
    print(f"\nüí° VARIABLES D'ENVIRONNEMENT RECOMMAND√âES")
    print(f"="*45)
    
    # Variables actuelles
    current_vars = {
        "GEOSERVER_URL": os.getenv("GEOSERVER_URL"),
        "GEOSERVER_USERNAME": os.getenv("GEOSERVER_USERNAME"),
        "GEOSERVER_PASSWORD": os.getenv("GEOSERVER_PASSWORD"),
        "ENVIRONMENT": os.getenv("ENVIRONMENT", "development")
    }
    
    print(f"\nüìã Variables actuelles:")
    for var, value in current_vars.items():
        if value:
            display_value = "***" if "PASSWORD" in var else value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: NON D√âFINIE")
    
    # Variables recommand√©es selon ChatGPT
    print(f"\nüìã Variables recommand√©es pour Railway:")
    recommendations = {
        "GEOSERVER_URL": "http://81.220.178.156:8080/geoserver",
        "GEOSERVER_USERNAME": "app_user", 
        "GEOSERVER_PASSWORD": "votre_mot_de_passe_securise"
    }
    
    for var, value in recommendations.items():
        display_value = "***" if "PASSWORD" in var else value
        print(f"   railway variables set {var}={display_value}")

def test_connexion_chatgpt_method():
    """Test selon la m√©thode recommand√©e par ChatGPT"""
    
    print(f"\nüéØ TEST M√âTHODE CHATGPT")
    print(f"="*30)
    
    # Configuration de test
    test_url = os.getenv("GEOSERVER_URL", "http://81.220.178.156:8080/geoserver")
    test_user = os.getenv("GEOSERVER_USERNAME", "railway_user")
    test_pass = os.getenv("GEOSERVER_PASSWORD", "railway_secure_pass_2024")
    
    print(f"URL test√©e: {test_url}")
    print(f"Utilisateur: {test_user}")
    
    try:
        # Test assert_geoserver_ok selon ChatGPT
        from urllib.parse import urljoin
        
        logger.info(f"[GeoServer] Test de connexion vers: {test_url}")
        
        # Test WMS GetCapabilities (m√©thode ChatGPT)
        response = requests.get(
            urljoin(test_url, "/wms"),
            params={
                "service": "WMS", 
                "request": "GetCapabilities", 
                "version": "1.3.0"
            },
            auth=HTTPBasicAuth(test_user, test_pass),
            timeout=(5, 20)  # ChatGPT recommend timeout
        )
        
        print(f"Statut HTTP: {response.status_code}")
        
        if response.status_code == 200:
            # V√©rification du contenu (m√©thode ChatGPT)
            if b"<WMS_Capabilities" in response.content:
                print("‚úÖ CONNEXION CHATGPT VALID√âE!")
                print("üéØ WMS Capabilities d√©tect√©es correctement")
                logger.info("[GeoServer] Capabilities OK")
                
                # Test additionnel: compter les layers
                if b"<Layer" in response.content:
                    layer_count = response.content.count(b"<Layer")
                    print(f"üó∫Ô∏è Layers d√©tect√©es: {layer_count}")
                
                return True
            else:
                print("‚ö†Ô∏è R√©ponse HTTP 200 mais contenu inattendu")
                print(f"D√©but r√©ponse: {response.text[:200]}...")
                return False
                
        elif response.status_code == 401:
            print("üîê ERREUR D'AUTHENTIFICATION")
            print("V√©rifiez GEOSERVER_USERNAME et GEOSERVER_PASSWORD")
            logger.error("[GeoServer] √âchec authentification")
            return False
            
        elif response.status_code == 404:
            print("‚ùå GEOSERVER NON TROUV√â")
            print("V√©rifiez GEOSERVER_URL")
            return False
            
        else:
            print(f"‚ùå ERREUR {response.status_code}")
            print(f"R√©ponse: {response.text[:200]}...")
            return False
            
    except requests.exceptions.ConnectTimeout:
        print("‚ùå TIMEOUT DE CONNEXION")
        print("Serveur non accessible ou trop lent")
        logger.exception("[GeoServer] Timeout")
        return False
        
    except requests.exceptions.ConnectionError as e:
        print("‚ùå ERREUR DE CONNEXION")
        print(f"D√©tails: {e}")
        logger.exception("[GeoServer] Connexion √©chou√©e")
        return False
        
    except Exception as e:
        print(f"‚ùå ERREUR INATTENDUE: {e}")
        logger.exception("[GeoServer] Erreur")
        return False

def test_proxy_base_url():
    """Test et recommandations pour Proxy Base URL"""
    
    print(f"\nüîß CONFIGURATION PROXY BASE URL GEOSERVER")
    print(f"="*40)
    
    test_url = os.getenv("GEOSERVER_URL", "http://81.220.178.156:8080/geoserver")
    
    print(f"üìç Configuration actuelle:")
    print(f"   URL: {test_url}")
    
    print(f"\nüìç Configuration recommand√©e dans GeoServer Admin:")
    print(f"   1. Aller dans: Global ‚Üí Settings")
    print(f"   2. Proxy Base URL: {test_url}")
    print(f"   3. Use headers for Proxy URL: ‚úÖ Coch√©")
    
    print(f"\nüí° Pourquoi c'est important:")
    print(f"   - Les URLs dans GetCapabilities seront correctes")
    print(f"   - √âvite les liens localhost dans les r√©ponses")
    print(f"   - N√©cessaire pour que Railway acc√®de correctement")

def show_security_checklist():
    """Checklist s√©curit√© selon ChatGPT"""
    
    print(f"\nüîí CHECKLIST S√âCURIT√â CHATGPT")
    print(f"="*35)
    
    print(f"\n‚úÖ √Ä v√©rifier dans GeoServer:")
    print(f"   ‚ñ° Utilisateur 'app_user' cr√©√© avec ROLE_READER")
    print(f"   ‚ñ° Service Security ‚Üí WMS: ROLE_READER autoris√©")
    print(f"   ‚ñ° Service Security ‚Üí WFS: ROLE_READER autoris√©") 
    print(f"   ‚ñ° Data Security: Read access pour vos workspaces")
    print(f"   ‚ñ° Proxy Base URL configur√©e")
    
    print(f"\n‚úÖ Variables Railway:")
    print(f"   ‚ñ° GEOSERVER_URL d√©finie (pas de localhost)")
    print(f"   ‚ñ° GEOSERVER_USERNAME d√©fini")
    print(f"   ‚ñ° GEOSERVER_PASSWORD d√©fini")
    print(f"   ‚ñ° Variables identiques local/production")
    
    print(f"\n‚úÖ R√©seau/Firewall:")
    print(f"   ‚ñ° Port 8080 ouvert sur votre serveur")
    print(f"   ‚ñ° IP Railway autoris√©e (ou tous si test)")

def main():
    """Test principal"""
    
    test_configuration_distante()
    test_variables_environnement()
    success = test_connexion_chatgpt_method()
    test_proxy_base_url()
    show_security_checklist()
    
    print(f"\nüéØ R√âSUM√â DU TEST")
    print(f"="*20)
    print(f"Configuration ChatGPT: {'‚úÖ VALID√âE' if success else '‚ùå √Ä CORRIGER'}")
    
    if success:
        print(f"üéâ Votre configuration est pr√™te pour Railway !")
        print(f"Vous pouvez d√©ployer en utilisant les m√™mes variables.")
    else:
        print(f"‚ö†Ô∏è Corrigez les points ci-dessus avant d√©ploiement Railway.")

if __name__ == "__main__":
    main()
