#!/usr/bin/env python3
"""
üîç DIAGNOSTIC GEOSERVER AGRIWEB 2.0
Script de v√©rification et test de toutes vos couches GeoServer
"""

import requests
import json
from datetime import datetime
import sys

def diagnose_geoserver():
    """Diagnostic complet de votre GeoServer"""
    
    print("üîç DIAGNOSTIC GEOSERVER AGRIWEB 2.0")
    print("=" * 60)
    print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    GEOSERVER_URL = "http://localhost:8080/geoserver"
    
    # 1. Test de connexion
    print("\n1Ô∏è‚É£ Test de connexion GeoServer...")
    try:
        response = requests.get(f"{GEOSERVER_URL}/rest/about/version.json", 
                              auth=('admin', 'geoserver'), timeout=10)
        if response.status_code == 200:
            version_info = response.json()
            print(f"  ‚úÖ GeoServer connect√© sur {GEOSERVER_URL}")
            resources = version_info.get('about', {}).get('resource', [])
            if resources:
                version = resources[0].get('Version', 'Inconnue')
                print(f"  üìä Version: {version}")
        else:
            print(f"  ‚ùå Erreur de connexion: HTTP {response.status_code}")
            print("  üí° V√©rifiez que GeoServer est d√©marr√© et accessible")
            return False
    except requests.exceptions.ConnectionError:
        print(f"  üö® Impossible de se connecter √† {GEOSERVER_URL}")
        print("  üí° GeoServer est-il d√©marr√© ? Port correct ?")
        return False
    except Exception as e:
        print(f"  üö® Erreur: {e}")
        return False
    
    # 2. Test des workspaces
    print("\n2Ô∏è‚É£ V√©rification des workspaces...")
    try:
        response = requests.get(f"{GEOSERVER_URL}/rest/workspaces.json",
                              auth=('admin', 'geoserver'))
        if response.status_code == 200:
            workspaces = response.json().get("workspaces", {}).get("workspace", [])
            workspace_names = [ws["name"] for ws in workspaces]
            print(f"  üìÅ Workspaces trouv√©s: {', '.join(workspace_names)}")
            
            if "gpu" in workspace_names:
                print("  ‚úÖ Workspace 'gpu' d√©tect√© (utilis√© par AgriWeb)")
            else:
                print("  ‚ö†Ô∏è Workspace 'gpu' manquant")
                print("  üí° Cr√©ez le workspace 'gpu' dans GeoServer")
        else:
            print(f"  ‚ùå Erreur workspaces: HTTP {response.status_code}")
    except Exception as e:
        print(f"  üö® Erreur workspaces: {e}")
    
    # 3. Test de toutes vos couches AgriWeb
    print("\n3Ô∏è‚É£ Test des couches AgriWeb...")
    
    # Toutes vos couches d'apr√®s agriweb_source.py
    all_layers = {
        "üó∫Ô∏è Cadastre": "gpu:prefixes_sections",
        "‚ö° Postes BT": "gpu:poste_elec_shapefile",
        "üîå Postes HTA": "gpu:postes-electriques-rte", 
        "üìä Capacit√©s r√©seau": "gpu:CapacitesDAccueil",
        "üÖøÔ∏è Parkings": "gpu:parkings_sup500m2",
        "üèöÔ∏è Friches": "gpu:friches-standard",
        "‚òÄÔ∏è Potentiel solaire": "gpu:POTENTIEL_SOLAIRE_FRICHE_BDD_PSF_LAMB93",
        "üåø ZAER": "gpu:ZAER_ARRETE_SHP_FRA",
        "üåæ RPG": "gpu:PARCELLES_GRAPHIQUES",
        "üè¢ Sir√®ne": "gpu:GeolocalisationEtablissement_Sirene france",
        "üèòÔ∏è PLU": "gpu:gpu1",
        "üìç Parcelles": "gpu:PARCELLE2024",
        "üêÑ √âleveurs": "gpu:etablissements_eleveurs",
        "üåä PPRI": "gpu:ppri"
    }
    
    working_layers = 0
    critical_layers = 0
    
    for nom, layer in all_layers.items():
        # Marquer les couches critiques
        is_critical = layer in [
            "gpu:prefixes_sections",
            "gpu:poste_elec_shapefile", 
            "gpu:PARCELLES_GRAPHIQUES"
        ]
        if is_critical:
            critical_layers += 1
        
        if test_single_layer(GEOSERVER_URL, nom, layer, is_critical):
            working_layers += 1
    
    # 4. R√©sum√© et recommandations
    print(f"\nüìä R√âSUM√â DU DIAGNOSTIC")
    print("-" * 40)
    print(f"‚úÖ Couches fonctionnelles: {working_layers}/{len(all_layers)}")
    print(f"üî• Couches critiques OK: {min(critical_layers, working_layers)}/{critical_layers}")
    
    if working_layers == len(all_layers):
        print("\nüéâ EXCELLENT ! Toutes vos couches sont accessibles !")
        print("   AgriWeb 2.0 peut utiliser toutes les fonctionnalit√©s.")
        
    elif working_layers >= critical_layers:
        print("\n‚úÖ BIEN ! Les couches critiques fonctionnent.")
        print("   AgriWeb 2.0 peut fonctionner avec les fonctionnalit√©s de base.")
        print("   Corrigez les autres couches pour les fonctionnalit√©s avanc√©es.")
        
    else:
        print("\n‚ö†Ô∏è ATTENTION ! Des couches critiques sont manquantes.")
        print("   AgriWeb 2.0 aura des fonctionnalit√©s limit√©es.")
        
    # 5. Recommandations
    print(f"\nüí° RECOMMANDATIONS")
    print("-" * 20)
    
    if working_layers < len(all_layers):
        print("1. V√©rifiez que vos donn√©es sont bien import√©es dans GeoServer")
        print("2. V√©rifiez les noms des couches (attention √† la casse)")
        print("3. V√©rifiez les permissions d'acc√®s aux donn√©es")
        
    print("4. Optimisez vos couches avec des index spatiaux")
    print("5. Configurez GeoWebCache pour les performances")
    print("6. Testez avec des requ√™tes r√©elles sur une commune")
    
    return working_layers >= critical_layers

def test_single_layer(geoserver_url, nom, layer_name, is_critical=False):
    """Test d'une couche sp√©cifique"""
    url = f"{geoserver_url}/ows"
    params = {
        "service": "WFS",
        "version": "1.0.0",
        "request": "GetFeature", 
        "typeName": layer_name,
        "maxFeatures": 1,
        "outputFormat": "application/json"
    }
    
    try:
        response = requests.get(url, params=params, timeout=15)
        if response.status_code == 200:
            data = response.json()
            feature_count = len(data.get("features", []))
            
            # V√©rifier s'il y a des donn√©es
            if feature_count > 0:
                critical_mark = " üî•" if is_critical else ""
                print(f"  ‚úÖ {nom}: {feature_count} feature(s){critical_mark}")
                return True
            else:
                critical_mark = " üî•" if is_critical else ""
                print(f"  ‚ö†Ô∏è {nom}: 0 features (couche vide){critical_mark}")
                return False
        else:
            critical_mark = " üî•" if is_critical else ""
            print(f"  ‚ùå {nom}: HTTP {response.status_code}{critical_mark}")
            if response.status_code == 404:
                print(f"     üí° Couche '{layer_name}' non trouv√©e")
            return False
    except requests.exceptions.Timeout:
        print(f"  ‚è∞ {nom}: Timeout (> 15s)")
        return False
    except Exception as e:
        print(f"  üö® {nom}: {str(e)}")
        return False

def test_specific_commune():
    """Test avec une commune sp√©cifique"""
    print("\n4Ô∏è‚É£ Test avec une commune r√©elle...")
    
    # Bbox d'une petite zone (exemple: autour de Paris)
    test_bbox = [2.0, 48.5, 2.5, 49.0]  # Longitude min, Latitude min, Longitude max, Latitude max
    
    GEOSERVER_URL = "http://localhost:8080/geoserver"
    test_layer = "gpu:prefixes_sections"  # Couche cadastre
    
    url = f"{GEOSERVER_URL}/ows"
    bbox_str = f"{test_bbox[0]},{test_bbox[1]},{test_bbox[2]},{test_bbox[3]},EPSG:4326"
    
    params = {
        "service": "WFS",
        "version": "1.0.0",
        "request": "GetFeature",
        "typeName": test_layer,
        "bbox": bbox_str,
        "maxFeatures": 10,
        "outputFormat": "application/json"
    }
    
    try:
        print(f"  üéØ Test avec bbox: {test_bbox}")
        response = requests.get(url, params=params, timeout=20)
        
        if response.status_code == 200:
            data = response.json()
            features = data.get("features", [])
            print(f"  ‚úÖ Test spatial r√©ussi: {len(features)} features dans la zone")
            
            # Afficher quelques propri√©t√©s si disponibles
            if features:
                props = features[0].get("properties", {})
                print(f"  üìã Exemple de propri√©t√©s: {list(props.keys())[:5]}")
            
            return True
        else:
            print(f"  ‚ùå Test spatial √©chou√©: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"  üö® Erreur test spatial: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Lancement du diagnostic GeoServer...")
    
    success = diagnose_geoserver()
    
    # Test spatial bonus
    test_specific_commune()
    
    print("\n" + "="*60)
    if success:
        print("üéâ DIAGNOSTIC TERMIN√â - GeoServer pr√™t pour AgriWeb 2.0!")
        print("   Vous pouvez d√©marrer la commercialisation.")
    else:
        print("‚ö†Ô∏è DIAGNOSTIC TERMIN√â - Configuration requise")
        print("   Corrigez les probl√®mes avant la production.")
    
    print("\nüìñ Consultez GUIDE_GEOSERVER_CONFIGURATION.md pour plus de d√©tails.")
    
    sys.exit(0 if success else 1)
